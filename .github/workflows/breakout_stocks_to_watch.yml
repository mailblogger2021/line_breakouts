permissions: write-all
name: Stock to watch
on:
  push:
    branches:
    - main
  schedule:
    - cron: '10 5-11 * * 1-5'    # Mon-Fri hourly from 5:10 to 11:10
    - cron: '30 10 * * 1-5'      # Daily at 10:30 Mon-Fri
    - cron: '30 10 * * 3,5'      # Weekly on Wednesday and Friday at 10:30
    - cron: '30 10 15,30 * *'    # Twice a month on the 15th and 30th at 10:30
    - cron: '30 10 1 1,4,7,10 *' # Quarterly on the 1st of Jan, Apr, Jul, Oct at 10:30
jobs:
  build:
    runs-on: macos-latest
    steps:

    - name: Checkout repo content
      uses: actions/checkout@v2

    - name: Check commit message
      id: commit_message_check
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: Echo commit message
      run: |
        echo "Commit message: ${{ env.COMMIT_MESSAGE }}"

    - name: Set commit message flag
      id: commit_message_flag
      run: |
        if [[ "${{ env.COMMIT_MESSAGE }}" != *"break out stock"* && "${{ env.COMMIT_MESSAGE }}" != *"all"* ]]; then
          echo "COMMIT_MESSAGE_VALID=false" >> $GITHUB_ENV
        else
          echo "COMMIT_MESSAGE_VALID=true" >> $GITHUB_ENV
        fi

    - name: Setup Python
      if: env.COMMIT_MESSAGE_VALID == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python packages
      if: env.COMMIT_MESSAGE_VALID == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Determine the schedule
      if: env.COMMIT_MESSAGE_VALID == 'true' && github.event_name == 'schedule'
      id: schedule
      run: |
        if [[ "${{ github.event.schedule }}" == '10 5-11 * * 1-5' ]]; then
          echo "SCHEDULE_TYPE=60m" >> $GITHUB_ENV
        elif [[ "${{ github.event.schedule }}" == '30 10 * * 1-5' ]]; then
          echo "SCHEDULE_TYPE=day" >> $GITHUB_ENV
        elif [[ "${{ github.event.schedule }}" == '30 10 * * 3,5' ]]; then
          echo "SCHEDULE_TYPE=week" >> $GITHUB_ENV
        elif [[ "${{ github.event.schedule }}" == '30 10 15,30 * *' ]]; then
          echo "SCHEDULE_TYPE=month" >> $GITHUB_ENV
        elif [[ "${{ github.event.schedule }}" == '30 10 1 1,4,7,10 *' ]]; then
          echo "SCHEDULE_TYPE=quarter" >> $GITHUB_ENV
        fi

    - name: Determine the push
      if: env.COMMIT_MESSAGE_VALID == 'true' && github.event_name == 'push'
      id: push
      run: |
        if [[ "${{ env.COMMIT_MESSAGE }}" == *"all"* ]]; then
          echo "SCHEDULE_TYPE=all" >> $GITHUB_ENV
        elif [[ "${{ env.COMMIT_MESSAGE }}" == *"60m"* ]]; then
          echo "SCHEDULE_TYPE=hour" >> $GITHUB_ENV
        elif [[ "${{ env.COMMIT_MESSAGE }}" == *"day"* ]]; then
          echo "SCHEDULE_TYPE=day" >> $GITHUB_ENV
        elif [[ "${{ env.COMMIT_MESSAGE }}" == *"week"* ]]; then
          echo "SCHEDULE_TYPE=week" >> $GITHUB_ENV
        elif [[ "${{ env.COMMIT_MESSAGE }}" == *"month"* ]]; then
          echo "SCHEDULE_TYPE=month" >> $GITHUB_ENV
        elif [[ "${{ env.COMMIT_MESSAGE }}" == *"quarter"* ]]; then
          echo "SCHEDULE_TYPE=quarter" >> $GITHUB_ENV
        fi

    - name: Run Python script based on schedule and push
      if: env.COMMIT_MESSAGE_VALID == 'true'
      run: |
        if [[ "${SCHEDULE_TYPE}" == "60m" ]]; then
          python chartink_screener.py "hour"
          python pdf_report_generator.py "hour"
        elif [[ "${SCHEDULE_TYPE}" == "day" ]]; then
          python chartink_screener.py "day"
          python pdf_report_generator.py "day"
        elif [[ "${SCHEDULE_TYPE}" == "week" ]]; then
          python pdf_report_generator.py "week"
        elif [[ "${SCHEDULE_TYPE}" == "month" ]]; then
          python pdf_report_generator.py "month"
        elif [[ "${SCHEDULE_TYPE}" == "quarter" ]]; then
          python pdf_report_generator.py "quarter"
        elif [[ "${SCHEDULE_TYPE}" == "all" ]]; then
          python chartink_screener.py
          python pdf_report_generator.py "day,week,month,quarter"
        fi

    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff-index --quiet HEAD || (git commit -a -m "daily.yaml completed" --allow-empty)

    - name: Fetch changes
      run: git fetch origin

    - name: Merge changes
      run: git merge origin/main

    - name: Push changes
      run: git push https://github.com/mailblogger2021/line_breakouts.git main
